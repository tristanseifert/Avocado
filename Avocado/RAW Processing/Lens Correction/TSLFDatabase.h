//
//  TSLFDatabase.h
//  Avocado
//
//  Created by Tristan Seifert on 20160525.
//  Copyright Â© 2016 Tristan Seifert. All rights reserved.
//

#import <Foundation/Foundation.h>

#import "TSLFLens.h"
#import "TSLFCamera.h"

/**
 *  Various flags to use in the search for lenses. They can be combined with a
 *	bitwise OR operation, unless otherwise specified.
 */
typedef NS_ENUM(NSUInteger, TSLFLensSearchFlags) {
	/**
	 *  Focal length comparisons to discard invalid lenses will not be performed
	 *	if this flag is set. This could be useful if the lens reported an
	 *	incorrect focal length, or the metadata is incorrect.
	 */
	kTSLFLensSearchIgnoreFocalLength = (1 << 0),
};

@class TSLibraryImage;
@interface TSLFDatabase : NSObject

/**
 * Returns the shared instance of the database. This object
 * should be used for all lookups.
 */
+ (instancetype) sharedInstance;


/**
 * Attempts to find a camera object for the given image. If no camera could be
 * found, nil is returned.
 */
- (TSLFCamera *) cameraForImage:(TSLibraryImage *) image;

/**
 * Attempts to find a lens object for the given image. If no suitable
 * lens can be found, nil is returned. If suitable lenses are found, an
 * array of lenses is returned.
 */
- (NSArray<TSLFLens *> *) lensesForImage:(TSLibraryImage *) image withFlags:(TSLFLensSearchFlags) flags;


/**
 * Searches a LensFun-foramtted "localized string" for the given locale; if no
 * string for that locale cane be found, the unlocalized string is returned.
 */
+ (NSString *) stringForLocale:(NSLocale *) locale inLFString:(char *) lfString;


/**
 *  Finds a previously found camera, given the data blob generated by its
 *	`persistentData` method.
 *
 *  @param data Persistent data (as produced by NSKeyedArchiver)
 *
 *  @return A camera object, or nil if one could not be found.
 */
- (TSLFCamera *) findCameraWithPersistentData:(NSData *) data;

/**
 *  Finds a previously found lens, given the data blob generated by its
 *	`persistentData` method.
 *
 *  @param data Persistent data (as produced by NSKeyedArchiver)
 *	@param camera Camera object that was previously decoded
 *
 *  @return A lens object, or nil if one could not be found.
 */
- (TSLFLens *) findLensWithPersistentData:(NSData *) data andCamera:(TSLFCamera *) camera;

@end
